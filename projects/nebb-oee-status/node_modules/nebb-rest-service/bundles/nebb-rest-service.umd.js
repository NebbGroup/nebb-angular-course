(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('nebb-rest-service', ['exports', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :
    (factory((global['nebb-rest-service'] = {}),global.rxjs,global.rxjs.operators,global.ng.core));
}(this, (function (exports,rxjs,operators,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    // unsupported: template constraints.
    /**
     * @template T
     */
    var  
    // unsupported: template constraints.
    /**
     * @template T
     */
    ResourceService = (function () {
        function ResourceService(httpClient, url, endpoint, serializer) {
            this.httpClient = httpClient;
            this.url = url;
            this.endpoint = endpoint;
            this.serializer = serializer;
        }
        /**
         * @param {?} item
         * @return {?}
         */
        ResourceService.prototype.create = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.httpClient
                    .post(this.url + "/" + this.endpoint, this.serializer.toJson(item))
                    .pipe(operators.catchError(this.handleError('create', item)));
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ResourceService.prototype.update = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                return this.httpClient
                    .put(this.url + "/" + this.endpoint + "/" + item.id, this.serializer.toJson(item))
                    .pipe(operators.catchError(this.handleError('update', item)));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ResourceService.prototype.get = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                return this.httpClient.get(this.url + "/" + this.endpoint + "/" + id);
            };
        /**
         * @param {?} queryOptions
         * @return {?}
         */
        ResourceService.prototype.list = /**
         * @param {?} queryOptions
         * @return {?}
         */
            function (queryOptions) {
                var _this = this;
                return this.httpClient
                    .get(this.url + "/" + this.endpoint + "?" + queryOptions.toQueryString())
                    .pipe(operators.tap(function (t) { return _this.log("fetched data"); }));
            };
        /**
         * @param {?} id
         * @return {?}
         */
        ResourceService.prototype.delete = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                var _this = this;
                return this.httpClient.delete(this.url + "/" + this.endpoint + "/" + id).pipe(operators.tap(function (t) { return _this.log("fetched data"); }), operators.catchError(this.handleError('delete')));
            };
        /**
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
        ResourceService.prototype.handleError = /**
         * @param {?=} operation
         * @param {?=} result
         * @return {?}
         */
            function (operation, result) {
                var _this = this;
                if (operation === void 0) {
                    operation = 'operation';
                }
                return function (error) {
                    console.error(error);
                    _this.log(operation + " failed: " + error.message);
                    return rxjs.of(/** @type {?} */ (result));
                };
            };
        /**
         * @param {?} message
         * @return {?}
         */
        ResourceService.prototype.log = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                console.log('Resource.service: ' + message);
            };
        return ResourceService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var Resource = (function () {
        function Resource(values) {
            if (values === void 0) {
                values = {};
            }
            Object.assign(this, values);
        }
        return Resource;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NebbRestServiceModule = (function () {
        function NebbRestServiceModule() {
        }
        NebbRestServiceModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [],
                        declarations: [],
                        exports: []
                    },] },
        ];
        return NebbRestServiceModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var QueryOptions = (function () {
        function QueryOptions() {
            this.pageNumber = 1;
            this.pageSize = 10000;
        }
        /**
         * @return {?}
         */
        QueryOptions.prototype.toQueryMap = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ queryMap = new Map();
                queryMap.set('pageNumber', "" + this.pageNumber);
                queryMap.set('pageSize', "" + this.pageSize);
                return queryMap;
            };
        /**
         * @return {?}
         */
        QueryOptions.prototype.toQueryString = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ queryString = '';
                this.toQueryMap().forEach(function (value, key) {
                    queryString = queryString.concat(key + "=" + value + "&");
                });
                return queryString.substring(0, queryString.length - 1);
            };
        return QueryOptions;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.ResourceService = ResourceService;
    exports.Resource = Resource;
    exports.NebbRestServiceModule = NebbRestServiceModule;
    exports.QueryOptions = QueryOptions;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmViYi1yZXN0LXNlcnZpY2UudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9uZWJiLXJlc3Qtc2VydmljZS9saWIvcmVzb3VyY2Uuc2VydmljZS50cyIsIm5nOi8vbmViYi1yZXN0LXNlcnZpY2UvbGliL3Jlc291cmNlLm1vZGVsLnRzIiwibmc6Ly9uZWJiLXJlc3Qtc2VydmljZS9saWIvbmViYi1yZXN0LXNlcnZpY2UubW9kdWxlLnRzIiwibmc6Ly9uZWJiLXJlc3Qtc2VydmljZS9saWIvcXVlcnktb3B0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBTZXJpYWxpemVyIH0gZnJvbSAnLi9zZXJpYWxpemVyJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBRdWVyeU9wdGlvbnMgfSBmcm9tICcuL3F1ZXJ5LW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBSZXNvdXJjZSB9IGZyb20gJy4vcmVzb3VyY2UubW9kZWwnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlc291cmNlU2VydmljZTxUIGV4dGVuZHMgUmVzb3VyY2U+IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcclxuICAgIHByaXZhdGUgdXJsOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIGVuZHBvaW50OiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIHNlcmlhbGl6ZXI6IFNlcmlhbGl6ZXJcclxuICApIHt9XHJcblxyXG4gIHB1YmxpYyBjcmVhdGUoaXRlbTogVCk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxyXG4gICAgICAucG9zdDxUPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fWAsIHRoaXMuc2VyaWFsaXplci50b0pzb24oaXRlbSkpXHJcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcignY3JlYXRlJywgaXRlbSkpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1cGRhdGUoaXRlbTogVCk6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxyXG4gICAgICAucHV0PFQ+KFxyXG4gICAgICAgIGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9LyR7aXRlbS5pZH1gLFxyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplci50b0pzb24oaXRlbSlcclxuICAgICAgKVxyXG4gICAgICAucGlwZShjYXRjaEVycm9yKHRoaXMuaGFuZGxlRXJyb3IoJ3VwZGF0ZScsIGl0ZW0pKSk7XHJcbiAgfVxyXG5cclxuICBnZXQoaWQ6IG51bWJlcik6IE9ic2VydmFibGU8VD4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudC5nZXQ8VD4oYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0vJHtpZH1gKTtcclxuICB9XHJcblxyXG4gIGxpc3QocXVlcnlPcHRpb25zOiBRdWVyeU9wdGlvbnMpOiBPYnNlcnZhYmxlPFRbXT4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cENsaWVudFxyXG4gICAgICAuZ2V0PFRbXT4oYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0/JHtxdWVyeU9wdGlvbnMudG9RdWVyeVN0cmluZygpfWApXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCh0ID0+IHRoaXMubG9nKGBmZXRjaGVkIGRhdGFgKSlcclxuICAgICAgKTtcclxuICB9XHJcblxyXG4gIGRlbGV0ZShpZDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmRlbGV0ZShgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fS8ke2lkfWApLnBpcGUoXHJcbiAgICAgIHRhcCh0ID0+IHRoaXMubG9nKGBmZXRjaGVkIGRhdGFgKSksXHJcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcignZGVsZXRlJykpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihvcGVyYXRpb24gPSAnb3BlcmF0aW9uJywgcmVzdWx0PzogVCkge1xyXG4gICAgcmV0dXJuIChlcnJvcjogYW55KTogT2JzZXJ2YWJsZTxUPiA9PiB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICB0aGlzLmxvZyhgJHtvcGVyYXRpb259IGZhaWxlZDogJHtlcnJvci5tZXNzYWdlfWApO1xyXG4gICAgICByZXR1cm4gb2YocmVzdWx0IGFzIFQpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgbG9nKG1lc3NhZ2U6IHN0cmluZykge1xyXG4gICAgY29uc29sZS5sb2coJ1Jlc291cmNlLnNlcnZpY2U6ICcgKyBtZXNzYWdlKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFJlc291cmNlIHtcclxuICBpZDogbnVtYmVyO1xyXG4gIHBhcmVudElkPzogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2YWx1ZXM6IE9iamVjdCA9IHt9KSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHZhbHVlcyk7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtdLFxuICBleHBvcnRzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBOZWJiUmVzdFNlcnZpY2VNb2R1bGUgeyB9XG4iLCJpbXBvcnQgeyBRdWVyeUJ1aWxkZXIgfSBmcm9tICcuL3F1ZXJ5LWJ1aWxkZXInO1xyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXJ5T3B0aW9ucyBpbXBsZW1lbnRzIFF1ZXJ5QnVpbGRlciB7XHJcbiAgcHVibGljIHBhZ2VOdW1iZXI6IG51bWJlcjtcclxuICBwdWJsaWMgcGFnZVNpemU6IG51bWJlcjtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnBhZ2VOdW1iZXIgPSAxO1xyXG4gICAgdGhpcy5wYWdlU2l6ZSA9IDEwMDAwO1xyXG4gIH1cclxuXHJcbiAgdG9RdWVyeU1hcCgpIHtcclxuICAgIGNvbnN0IHF1ZXJ5TWFwID0gbmV3IE1hcDxzdHJpbmcsIHN0cmluZz4oKTtcclxuICAgIHF1ZXJ5TWFwLnNldCgncGFnZU51bWJlcicsIGAke3RoaXMucGFnZU51bWJlcn1gKTtcclxuICAgIHF1ZXJ5TWFwLnNldCgncGFnZVNpemUnLCBgJHt0aGlzLnBhZ2VTaXplfWApO1xyXG5cclxuICAgIHJldHVybiBxdWVyeU1hcDtcclxuICB9XHJcblxyXG4gIHRvUXVlcnlTdHJpbmcoKSB7XHJcbiAgICBsZXQgcXVlcnlTdHJpbmcgPSAnJztcclxuICAgIHRoaXMudG9RdWVyeU1hcCgpLmZvckVhY2goKHZhbHVlOiBzdHJpbmcsIGtleTogc3RyaW5nKSA9PiB7XHJcbiAgICAgIHF1ZXJ5U3RyaW5nID0gcXVlcnlTdHJpbmcuY29uY2F0KGAke2tleX09JHt2YWx1ZX0mYCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcXVlcnlTdHJpbmcuc3Vic3RyaW5nKDAsIHF1ZXJ5U3RyaW5nLmxlbmd0aCAtIDEpO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiY2F0Y2hFcnJvciIsInRhcCIsIm9mIiwiTmdNb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQTs7OztBQU1BOzs7OztJQUFBO1FBQ0UseUJBQ1UsWUFDQSxLQUNBLFVBQ0E7WUFIQSxlQUFVLEdBQVYsVUFBVTtZQUNWLFFBQUcsR0FBSCxHQUFHO1lBQ0gsYUFBUSxHQUFSLFFBQVE7WUFDUixlQUFVLEdBQVYsVUFBVTtTQUNoQjs7Ozs7UUFFRyxnQ0FBTTs7OztzQkFBQyxJQUFPO2dCQUNuQixPQUFPLElBQUksQ0FB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