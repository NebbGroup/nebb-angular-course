{"version":3,"sources":["ng://nebb-rest-service/lib/resource.service.ts","ng://nebb-rest-service/lib/resource.model.ts","ng://nebb-rest-service/lib/nebb-rest-service.module.ts","ng://nebb-rest-service/lib/query-options.ts"],"names":["ResourceService","httpClient","url","endpoint","serializer","this","prototype","create","item","post","toJson","pipe","catchError","handleError","update","put","id","get","list","queryOptions","_this","toQueryString","tap","t","log","delete","operation","result","error","console","message","of","Resource","values","Object","assign","NebbRestServiceModule","NgModule","args","imports","declarations","exports","QueryOptions","pageNumber","pageSize","toQueryMap","queryMap","Map","set","queryString","forEach","value","key","concat","substring","length"],"mappings":"8WAOA,IAAAA,EAAA,WACE,SAAAA,EACUC,EACAC,EACAC,EACAC,GAHAC,KAAAJ,WAAAA,EACAI,KAAAH,IAAAA,EACAG,KAAAF,SAAAA,EACAE,KAAAD,WAAAA,SAGHJ,EAAAM,UAAAC,gBAAOC,GACZ,OAAOH,KAAKJ,WACTQ,KAAWJ,KAAKH,IAAG,IAAIG,KAAKF,SAAYE,KAAKD,WAAWM,OAAOF,IAC/DG,KAAKC,EAAAA,WAAWP,KAAKQ,YAAY,SAAUL,MAGzCR,EAAAM,UAAAQ,gBAAON,GACZ,OAAOH,KAAKJ,WACTc,IACIV,KAAKH,IAAG,IAAIG,KAAKF,SAAQ,IAAIK,EAAKQ,GACrCX,KAAKD,WAAWM,OAAOF,IAExBG,KAAKC,EAAAA,WAAWP,KAAKQ,YAAY,SAAUL,MAGhDR,EAAAM,UAAAW,IAAA,SAAID,GACF,OAAOX,KAAKJ,WAAWgB,IAAUZ,KAAKH,IAAG,IAAIG,KAAKF,SAAQ,IAAIa,IAGhEhB,EAAAM,UAAAY,KAAA,SAAKC,GAAL,IAAAC,EAAAf,KACE,OAAOA,KAAKJ,WACTgB,IAAYZ,KAAKH,IAAG,IAAIG,KAAKF,SAAQ,IAAIgB,EAAaE,iBACtDV,KACCW,EAAAA,IAAI,SAAAC,GAAK,OAAAH,EAAKI,IAAI,oBAIxBxB,EAAAM,UAAAmB,UAAA,SAAOT,GAAP,IAAAI,EAAAf,KACE,OAAOA,KAAKJ,WAAWwB,UAAUpB,KAAKH,IAAG,IAAIG,KAAKF,SAAQ,IAAIa,GAAML,KAClEW,EAAAA,IAAI,SAAAC,GAAK,OAAAH,EAAKI,IAAI,kBAClBZ,EAAAA,WAAWP,KAAKQ,YAAY,aAIxBb,EAAAM,UAAAO,qBAAYa,EAAyBC,cAC3C,YADkB,IAAAD,IAAAA,EAAA,aACX,SAACE,GAGN,OAFAC,QAAQD,MAAMA,GACdR,EAAKI,IAAOE,EAAS,YAAYE,EAAME,SAChCC,EAAAA,GAAE,KAIL/B,EAAAM,UAAAkB,aAAIM,GACVD,QAAQL,IAAI,qBAAuBM,MAnDvC,GCPAE,EAIE,SAAYC,QAAA,IAAAA,IAAAA,EAAA,IACVC,OAAOC,OAAO9B,KAAM4B,ICLxBG,EAAA,oDAGCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,GAETC,aAAc,GACdC,QAAS,SAPX,GCEAC,EAAA,WAIE,SAAAA,IACErC,KAAKsC,WAAa,EAClBtC,KAAKuC,SAAW,WAGlBF,EAAApC,UAAAuC,WAAA,WACE,IAAMC,EAAW,IAAIC,IAIrB,OAHAD,EAASE,IAAI,aAAc,GAAG3C,KAAKsC,YACnCG,EAASE,IAAI,WAAY,GAAG3C,KAAKuC,UAE1BE,GAGTJ,EAAApC,UAAAe,cAAA,WACE,IAAI4B,EAAc,GAKlB,OAJA5C,KAAKwC,aAAaK,QAAQ,SAACC,EAAeC,GACxCH,EAAcA,EAAYI,OAAUD,EAAG,IAAID,EAAK,OAG3CF,EAAYK,UAAU,EAAGL,EAAYM,OAAS,MAvBzD","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Serializer } from './serializer';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { QueryOptions } from './query-options';\r\nimport { Resource } from './resource.model';\r\n\r\nexport class ResourceService<T extends Resource> {\r\n  constructor(\r\n    private httpClient: HttpClient,\r\n    private url: string,\r\n    private endpoint: string,\r\n    private serializer: Serializer\r\n  ) {}\r\n\r\n  public create(item: T): Observable<T> {\r\n    return this.httpClient\r\n      .post<T>(`${this.url}/${this.endpoint}`, this.serializer.toJson(item))\r\n      .pipe(catchError(this.handleError('create', item)));\r\n  }\r\n\r\n  public update(item: T): Observable<T> {\r\n    return this.httpClient\r\n      .put<T>(\r\n        `${this.url}/${this.endpoint}/${item.id}`,\r\n        this.serializer.toJson(item)\r\n      )\r\n      .pipe(catchError(this.handleError('update', item)));\r\n  }\r\n\r\n  get(id: number): Observable<T> {\r\n    return this.httpClient.get<T>(`${this.url}/${this.endpoint}/${id}`);\r\n  }\r\n\r\n  list(queryOptions: QueryOptions): Observable<T[]> {\r\n    return this.httpClient\r\n      .get<T[]>(`${this.url}/${this.endpoint}?${queryOptions.toQueryString()}`)\r\n      .pipe(\r\n        tap(t => this.log(`fetched data`))\r\n      );\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.httpClient.delete(`${this.url}/${this.endpoint}/${id}`).pipe(\r\n      tap(t => this.log(`fetched data`)),\r\n      catchError(this.handleError('delete'))\r\n    );\r\n  }\r\n\r\n  private handleError(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n      console.error(error);\r\n      this.log(`${operation} failed: ${error.message}`);\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  private log(message: string) {\r\n    console.log('Resource.service: ' + message);\r\n  }\r\n}\r\n","export class Resource {\r\n  id: number;\r\n  parentId?: number;\r\n\r\n  constructor(values: Object = {}) {\r\n    Object.assign(this, values);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\n\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [],\n  exports: []\n})\nexport class NebbRestServiceModule { }\n","import { QueryBuilder } from './query-builder';\r\n\r\nexport class QueryOptions implements QueryBuilder {\r\n  public pageNumber: number;\r\n  public pageSize: number;\r\n\r\n  constructor() {\r\n    this.pageNumber = 1;\r\n    this.pageSize = 10000;\r\n  }\r\n\r\n  toQueryMap() {\r\n    const queryMap = new Map<string, string>();\r\n    queryMap.set('pageNumber', `${this.pageNumber}`);\r\n    queryMap.set('pageSize', `${this.pageSize}`);\r\n\r\n    return queryMap;\r\n  }\r\n\r\n  toQueryString() {\r\n    let queryString = '';\r\n    this.toQueryMap().forEach((value: string, key: string) => {\r\n      queryString = queryString.concat(`${key}=${value}&`);\r\n    });\r\n\r\n    return queryString.substring(0, queryString.length - 1);\r\n  }\r\n}\r\n"]}