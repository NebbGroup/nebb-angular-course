/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
// unsupported: template constraints.
/**
 * @template T
 */
export class ResourceService {
    /**
     * @param {?} httpClient
     * @param {?} url
     * @param {?} endpoint
     * @param {?} serializer
     */
    constructor(httpClient, url, endpoint, serializer) {
        this.httpClient = httpClient;
        this.url = url;
        this.endpoint = endpoint;
        this.serializer = serializer;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    create(item) {
        return this.httpClient
            .post(`${this.url}/${this.endpoint}`, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('create', item)));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    update(item) {
        return this.httpClient
            .put(`${this.url}/${this.endpoint}/${item.id}`, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('update', item)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get(id) {
        return this.httpClient.get(`${this.url}/${this.endpoint}/${id}`);
    }
    /**
     * @param {?} queryOptions
     * @return {?}
     */
    list(queryOptions) {
        return this.httpClient
            .get(`${this.url}/${this.endpoint}?${queryOptions.toQueryString()}`)
            .pipe(tap(t => this.log(`fetched data`)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        return this.httpClient.delete(`${this.url}/${this.endpoint}/${id}`).pipe(tap(t => this.log(`fetched data`)), catchError(this.handleError('delete')));
    }
    /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    handleError(operation = 'operation', result) {
        return (error) => {
            console.error(error);
            this.log(`${operation} failed: ${error.message}`);
            return of(/** @type {?} */ (result));
        };
    }
    /**
     * @param {?} message
     * @return {?}
     */
    log(message) {
        console.log('Resource.service: ' + message);
    }
}
function ResourceService_tsickle_Closure_declarations() {
    /** @type {?} */
    ResourceService.prototype.httpClient;
    /** @type {?} */
    ResourceService.prototype.url;
    /** @type {?} */
    ResourceService.prototype.endpoint;
    /** @type {?} */
    ResourceService.prototype.serializer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25lYmItcmVzdC1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL3Jlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFJakQsTUFBTTs7Ozs7OztJQUNKLFlBQ1UsWUFDQSxLQUNBLFVBQ0E7UUFIQSxlQUFVLEdBQVYsVUFBVTtRQUNWLFFBQUcsR0FBSCxHQUFHO1FBQ0gsYUFBUSxHQUFSLFFBQVE7UUFDUixlQUFVLEdBQVYsVUFBVTtLQUNoQjs7Ozs7SUFFRyxNQUFNLENBQUMsSUFBTztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsSUFBSSxDQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDckUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7OztJQUdqRCxNQUFNLENBQUMsSUFBTztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsR0FBRyxDQUNGLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFDekMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQzdCO2FBQ0EsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7OztJQUd4RCxHQUFHLENBQUMsRUFBVTtRQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBSSxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0tBQ3JFOzs7OztJQUVELElBQUksQ0FBQyxZQUEwQjtRQUM3QixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsR0FBRyxDQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLFlBQVksQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO2FBQ3hFLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQ25DLENBQUM7S0FDTDs7Ozs7SUFFRCxNQUFNLENBQUMsRUFBVTtRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDdEUsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxFQUNsQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUN2QyxDQUFDO0tBQ0g7Ozs7OztJQUVPLFdBQVcsQ0FBQyxTQUFTLEdBQUcsV0FBVyxFQUFFLE1BQVU7UUFDckQsTUFBTSxDQUFDLENBQUMsS0FBVSxFQUFpQixFQUFFO1lBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsWUFBWSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUNsRCxNQUFNLENBQUMsRUFBRSxtQkFBQyxNQUFXLEVBQUMsQ0FBQztTQUN4QixDQUFDOzs7Ozs7SUFHSSxHQUFHLENBQUMsT0FBZTtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxDQUFDOztDQUUvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vcXVlcnktb3B0aW9ucyc7XHJcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnLi9yZXNvdXJjZS5tb2RlbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VTZXJ2aWNlPFQgZXh0ZW5kcyBSZXNvdXJjZT4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZyxcclxuICAgIHByaXZhdGUgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHByaXZhdGUgc2VyaWFsaXplcjogU2VyaWFsaXplclxyXG4gICkge31cclxuXHJcbiAgcHVibGljIGNyZWF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wb3N0PFQ+KGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9YCwgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdjcmVhdGUnLCBpdGVtKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wdXQ8VD4oXHJcbiAgICAgICAgYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0vJHtpdGVtLmlkfWAsXHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKVxyXG4gICAgICApXHJcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcigndXBkYXRlJywgaXRlbSkpKTtcclxuICB9XHJcblxyXG4gIGdldChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxUPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fS8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgbGlzdChxdWVyeU9wdGlvbnM6IFF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5nZXQ8VFtdPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fT8ke3F1ZXJ5T3B0aW9ucy50b1F1ZXJ5U3RyaW5nKCl9YClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCkucGlwZShcclxuICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKSxcclxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdkZWxldGUnKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUVycm9yKG9wZXJhdGlvbiA9ICdvcGVyYXRpb24nLCByZXN1bHQ/OiBUKSB7XHJcbiAgICByZXR1cm4gKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHRoaXMubG9nKGAke29wZXJhdGlvbn0gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHJldHVybiBvZihyZXN1bHQgYXMgVCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzb3VyY2Uuc2VydmljZTogJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=