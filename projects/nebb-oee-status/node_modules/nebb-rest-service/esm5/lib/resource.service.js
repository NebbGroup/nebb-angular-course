/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
// unsupported: template constraints.
/**
 * @template T
 */
var 
// unsupported: template constraints.
/**
 * @template T
 */
ResourceService = /** @class */ (function () {
    function ResourceService(httpClient, url, endpoint, serializer) {
        this.httpClient = httpClient;
        this.url = url;
        this.endpoint = endpoint;
        this.serializer = serializer;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    ResourceService.prototype.create = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.httpClient
            .post(this.url + "/" + this.endpoint, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('create', item)));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ResourceService.prototype.update = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.httpClient
            .put(this.url + "/" + this.endpoint + "/" + item.id, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('update', item)));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ResourceService.prototype.get = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.httpClient.get(this.url + "/" + this.endpoint + "/" + id);
    };
    /**
     * @param {?} queryOptions
     * @return {?}
     */
    ResourceService.prototype.list = /**
     * @param {?} queryOptions
     * @return {?}
     */
    function (queryOptions) {
        var _this = this;
        return this.httpClient
            .get(this.url + "/" + this.endpoint + "?" + queryOptions.toQueryString())
            .pipe(tap(function (t) { return _this.log("fetched data"); }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ResourceService.prototype.delete = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.httpClient.delete(this.url + "/" + this.endpoint + "/" + id).pipe(tap(function (t) { return _this.log("fetched data"); }), catchError(this.handleError('delete')));
    };
    /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    ResourceService.prototype.handleError = /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = 'operation'; }
        return function (error) {
            console.error(error);
            _this.log(operation + " failed: " + error.message);
            return of(/** @type {?} */ (result));
        };
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ResourceService.prototype.log = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        console.log('Resource.service: ' + message);
    };
    return ResourceService;
}());
// unsupported: template constraints.
/**
 * @template T
 */
export { ResourceService };
function ResourceService_tsickle_Closure_declarations() {
    /** @type {?} */
    ResourceService.prototype.httpClient;
    /** @type {?} */
    ResourceService.prototype.url;
    /** @type {?} */
    ResourceService.prototype.endpoint;
    /** @type {?} */
    ResourceService.prototype.serializer;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25lYmItcmVzdC1zZXJ2aWNlLyIsInNvdXJjZXMiOlsibGliL3Jlc291cmNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFJakQ7Ozs7O0FBQUE7SUFDRSx5QkFDVSxZQUNBLEtBQ0EsVUFDQTtRQUhBLGVBQVUsR0FBVixVQUFVO1FBQ1YsUUFBRyxHQUFILEdBQUc7UUFDSCxhQUFRLEdBQVIsUUFBUTtRQUNSLGVBQVUsR0FBVixVQUFVO0tBQ2hCOzs7OztJQUVHLGdDQUFNOzs7O2NBQUMsSUFBTztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsSUFBSSxDQUFPLElBQUksQ0FBQyxHQUFHLFNBQUksSUFBSSxDQUFDLFFBQVUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNyRSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7O0lBR2pELGdDQUFNOzs7O2NBQUMsSUFBTztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsR0FBRyxDQUNDLElBQUksQ0FBQyxHQUFHLFNBQUksSUFBSSxDQUFDLFFBQVEsU0FBSSxJQUFJLENBQUMsRUFBSSxFQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FDN0I7YUFDQSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7Ozs7O0lBR3hELDZCQUFHOzs7O0lBQUgsVUFBSSxFQUFVO1FBQ1osTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFPLElBQUksQ0FBQyxHQUFHLFNBQUksSUFBSSxDQUFDLFFBQVEsU0FBSSxFQUFJLENBQUMsQ0FBQztLQUNyRTs7Ozs7SUFFRCw4QkFBSTs7OztJQUFKLFVBQUssWUFBMEI7UUFBL0IsaUJBTUM7UUFMQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVU7YUFDbkIsR0FBRyxDQUFTLElBQUksQ0FBQyxHQUFHLFNBQUksSUFBSSxDQUFDLFFBQVEsU0FBSSxZQUFZLENBQUMsYUFBYSxFQUFJLENBQUM7YUFDeEUsSUFBSSxDQUNILEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FDbkMsQ0FBQztLQUNMOzs7OztJQUVELGdDQUFNOzs7O0lBQU4sVUFBTyxFQUFVO1FBQWpCLGlCQUtDO1FBSkMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFJLElBQUksQ0FBQyxHQUFHLFNBQUksSUFBSSxDQUFDLFFBQVEsU0FBSSxFQUFJLENBQUMsQ0FBQyxJQUFJLENBQ3RFLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQXhCLENBQXdCLENBQUMsRUFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FDdkMsQ0FBQztLQUNIOzs7Ozs7SUFFTyxxQ0FBVzs7Ozs7Y0FBQyxTQUF1QixFQUFFLE1BQVU7O1FBQW5DLDBCQUFBLEVBQUEsdUJBQXVCO1FBQ3pDLE1BQU0sQ0FBQyxVQUFDLEtBQVU7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQixLQUFJLENBQUMsR0FBRyxDQUFJLFNBQVMsaUJBQVksS0FBSyxDQUFDLE9BQVMsQ0FBQyxDQUFDO1lBQ2xELE1BQU0sQ0FBQyxFQUFFLG1CQUFDLE1BQVcsRUFBQyxDQUFDO1NBQ3hCLENBQUM7Ozs7OztJQUdJLDZCQUFHOzs7O2NBQUMsT0FBZTtRQUN6QixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLE9BQU8sQ0FBQyxDQUFDOzswQkExRGhEO0lBNERDLENBQUE7Ozs7O0FBckRELDJCQXFEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vcXVlcnktb3B0aW9ucyc7XHJcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnLi9yZXNvdXJjZS5tb2RlbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VTZXJ2aWNlPFQgZXh0ZW5kcyBSZXNvdXJjZT4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZyxcclxuICAgIHByaXZhdGUgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHByaXZhdGUgc2VyaWFsaXplcjogU2VyaWFsaXplclxyXG4gICkge31cclxuXHJcbiAgcHVibGljIGNyZWF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wb3N0PFQ+KGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9YCwgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdjcmVhdGUnLCBpdGVtKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wdXQ8VD4oXHJcbiAgICAgICAgYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0vJHtpdGVtLmlkfWAsXHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKVxyXG4gICAgICApXHJcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcigndXBkYXRlJywgaXRlbSkpKTtcclxuICB9XHJcblxyXG4gIGdldChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxUPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fS8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgbGlzdChxdWVyeU9wdGlvbnM6IFF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5nZXQ8VFtdPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fT8ke3F1ZXJ5T3B0aW9ucy50b1F1ZXJ5U3RyaW5nKCl9YClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCkucGlwZShcclxuICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKSxcclxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdkZWxldGUnKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUVycm9yKG9wZXJhdGlvbiA9ICdvcGVyYXRpb24nLCByZXN1bHQ/OiBUKSB7XHJcbiAgICByZXR1cm4gKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHRoaXMubG9nKGAke29wZXJhdGlvbn0gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHJldHVybiBvZihyZXN1bHQgYXMgVCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzb3VyY2Uuc2VydmljZTogJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG4iXX0=