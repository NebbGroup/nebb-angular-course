import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * @template T
 */
class ResourceService {
    /**
     * @param {?} httpClient
     * @param {?} url
     * @param {?} endpoint
     * @param {?} serializer
     */
    constructor(httpClient, url, endpoint, serializer) {
        this.httpClient = httpClient;
        this.url = url;
        this.endpoint = endpoint;
        this.serializer = serializer;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    create(item) {
        return this.httpClient
            .post(`${this.url}/${this.endpoint}`, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('create', item)));
    }
    /**
     * @param {?} item
     * @return {?}
     */
    update(item) {
        return this.httpClient
            .put(`${this.url}/${this.endpoint}/${item.id}`, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('update', item)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    get(id) {
        return this.httpClient.get(`${this.url}/${this.endpoint}/${id}`);
    }
    /**
     * @param {?} queryOptions
     * @return {?}
     */
    list(queryOptions) {
        return this.httpClient
            .get(`${this.url}/${this.endpoint}?${queryOptions.toQueryString()}`)
            .pipe(tap(t => this.log(`fetched data`)));
    }
    /**
     * @param {?} id
     * @return {?}
     */
    delete(id) {
        return this.httpClient.delete(`${this.url}/${this.endpoint}/${id}`).pipe(tap(t => this.log(`fetched data`)), catchError(this.handleError('delete')));
    }
    /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    handleError(operation = 'operation', result) {
        return (error) => {
            console.error(error);
            this.log(`${operation} failed: ${error.message}`);
            return of(/** @type {?} */ (result));
        };
    }
    /**
     * @param {?} message
     * @return {?}
     */
    log(message) {
        console.log('Resource.service: ' + message);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Resource {
    /**
     * @param {?=} values
     */
    constructor(values = {}) {
        Object.assign(this, values);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NebbRestServiceModule {
}
NebbRestServiceModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [],
                exports: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class QueryOptions {
    constructor() {
        this.pageNumber = 1;
        this.pageSize = 10000;
    }
    /**
     * @return {?}
     */
    toQueryMap() {
        const /** @type {?} */ queryMap = new Map();
        queryMap.set('pageNumber', `${this.pageNumber}`);
        queryMap.set('pageSize', `${this.pageSize}`);
        return queryMap;
    }
    /**
     * @return {?}
     */
    toQueryString() {
        let /** @type {?} */ queryString = '';
        this.toQueryMap().forEach((value, key) => {
            queryString = queryString.concat(`${key}=${value}&`);
        });
        return queryString.substring(0, queryString.length - 1);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ResourceService, Resource, NebbRestServiceModule, QueryOptions };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmViYi1yZXN0LXNlcnZpY2UuanMubWFwIiwic291cmNlcyI6WyJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9yZXNvdXJjZS5zZXJ2aWNlLnRzIiwibmc6Ly9uZWJiLXJlc3Qtc2VydmljZS9saWIvcmVzb3VyY2UubW9kZWwudHMiLCJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9uZWJiLXJlc3Qtc2VydmljZS5tb2R1bGUudHMiLCJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9xdWVyeS1vcHRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vcXVlcnktb3B0aW9ucyc7XHJcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnLi9yZXNvdXJjZS5tb2RlbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VTZXJ2aWNlPFQgZXh0ZW5kcyBSZXNvdXJjZT4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZyxcclxuICAgIHByaXZhdGUgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHByaXZhdGUgc2VyaWFsaXplcjogU2VyaWFsaXplclxyXG4gICkge31cclxuXHJcbiAgcHVibGljIGNyZWF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wb3N0PFQ+KGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9YCwgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdjcmVhdGUnLCBpdGVtKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wdXQ8VD4oXHJcbiAgICAgICAgYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0vJHtpdGVtLmlkfWAsXHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKVxyXG4gICAgICApXHJcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcigndXBkYXRlJywgaXRlbSkpKTtcclxuICB9XHJcblxyXG4gIGdldChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxUPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fS8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgbGlzdChxdWVyeU9wdGlvbnM6IFF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5nZXQ8VFtdPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fT8ke3F1ZXJ5T3B0aW9ucy50b1F1ZXJ5U3RyaW5nKCl9YClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCkucGlwZShcclxuICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKSxcclxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdkZWxldGUnKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUVycm9yKG9wZXJhdGlvbiA9ICdvcGVyYXRpb24nLCByZXN1bHQ/OiBUKSB7XHJcbiAgICByZXR1cm4gKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHRoaXMubG9nKGAke29wZXJhdGlvbn0gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHJldHVybiBvZihyZXN1bHQgYXMgVCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzb3VyY2Uuc2VydmljZTogJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgUmVzb3VyY2Uge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgcGFyZW50SWQ/OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZhbHVlczogT2JqZWN0ID0ge30pIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgdmFsdWVzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGV4cG9ydHM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5lYmJSZXN0U2VydmljZU1vZHVsZSB7IH1cbiIsImltcG9ydCB7IFF1ZXJ5QnVpbGRlciB9IGZyb20gJy4vcXVlcnktYnVpbGRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlcnlPcHRpb25zIGltcGxlbWVudHMgUXVlcnlCdWlsZGVyIHtcclxuICBwdWJsaWMgcGFnZU51bWJlcjogbnVtYmVyO1xyXG4gIHB1YmxpYyBwYWdlU2l6ZTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucGFnZU51bWJlciA9IDE7XHJcbiAgICB0aGlzLnBhZ2VTaXplID0gMTAwMDA7XHJcbiAgfVxyXG5cclxuICB0b1F1ZXJ5TWFwKCkge1xyXG4gICAgY29uc3QgcXVlcnlNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgcXVlcnlNYXAuc2V0KCdwYWdlTnVtYmVyJywgYCR7dGhpcy5wYWdlTnVtYmVyfWApO1xyXG4gICAgcXVlcnlNYXAuc2V0KCdwYWdlU2l6ZScsIGAke3RoaXMucGFnZVNpemV9YCk7XHJcblxyXG4gICAgcmV0dXJuIHF1ZXJ5TWFwO1xyXG4gIH1cclxuXHJcbiAgdG9RdWVyeVN0cmluZygpIHtcclxuICAgIGxldCBxdWVyeVN0cmluZyA9ICcnO1xyXG4gICAgdGhpcy50b1F1ZXJ5TWFwKCkuZm9yRWFjaCgodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZy5jb25jYXQoYCR7a2V5fT0ke3ZhbHVlfSZgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBxdWVyeVN0cmluZy5zdWJzdHJpbmcoMCwgcXVlcnlTdHJpbmcubGVuZ3RoIC0gMSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOzs7O0FBTUE7Ozs7Ozs7SUFDRSxZQUNVLFlBQ0EsS0FDQSxVQUNBO1FBSEEsZUFBVSxHQUFWLFVBQVU7UUFDVixRQUFHLEdBQUgsR0FBRztRQUNILGFBQVEsR0FBUixRQUFRO1FBQ1IsZUFBVSxHQUFWLFVBQVU7S0FDaEI7Ozs7O0lBRUcsTUFBTSxDQUFDLElBQU87UUFDbkIsT0FBTyxJQUFJLENBQUMsVUFBVTthQUNuQixJQUFJLENBQUksR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLElB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