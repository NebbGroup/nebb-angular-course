import { of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// unsupported: template constraints.
/**
 * @template T
 */
var  
// unsupported: template constraints.
/**
 * @template T
 */
ResourceService = /** @class */ (function () {
    function ResourceService(httpClient, url, endpoint, serializer) {
        this.httpClient = httpClient;
        this.url = url;
        this.endpoint = endpoint;
        this.serializer = serializer;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    ResourceService.prototype.create = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.httpClient
            .post(this.url + "/" + this.endpoint, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('create', item)));
    };
    /**
     * @param {?} item
     * @return {?}
     */
    ResourceService.prototype.update = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.httpClient
            .put(this.url + "/" + this.endpoint + "/" + item.id, this.serializer.toJson(item))
            .pipe(catchError(this.handleError('update', item)));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ResourceService.prototype.get = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        return this.httpClient.get(this.url + "/" + this.endpoint + "/" + id);
    };
    /**
     * @param {?} queryOptions
     * @return {?}
     */
    ResourceService.prototype.list = /**
     * @param {?} queryOptions
     * @return {?}
     */
    function (queryOptions) {
        var _this = this;
        return this.httpClient
            .get(this.url + "/" + this.endpoint + "?" + queryOptions.toQueryString())
            .pipe(tap(function (t) { return _this.log("fetched data"); }));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    ResourceService.prototype.delete = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return this.httpClient.delete(this.url + "/" + this.endpoint + "/" + id).pipe(tap(function (t) { return _this.log("fetched data"); }), catchError(this.handleError('delete')));
    };
    /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    ResourceService.prototype.handleError = /**
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    function (operation, result) {
        var _this = this;
        if (operation === void 0) { operation = 'operation'; }
        return function (error) {
            console.error(error);
            _this.log(operation + " failed: " + error.message);
            return of(/** @type {?} */ (result));
        };
    };
    /**
     * @param {?} message
     * @return {?}
     */
    ResourceService.prototype.log = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        console.log('Resource.service: ' + message);
    };
    return ResourceService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Resource = /** @class */ (function () {
    function Resource(values) {
        if (values === void 0) { values = {}; }
        Object.assign(this, values);
    }
    return Resource;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NebbRestServiceModule = /** @class */ (function () {
    function NebbRestServiceModule() {
    }
    NebbRestServiceModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: []
                },] },
    ];
    return NebbRestServiceModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var QueryOptions = /** @class */ (function () {
    function QueryOptions() {
        this.pageNumber = 1;
        this.pageSize = 10000;
    }
    /**
     * @return {?}
     */
    QueryOptions.prototype.toQueryMap = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ queryMap = new Map();
        queryMap.set('pageNumber', "" + this.pageNumber);
        queryMap.set('pageSize', "" + this.pageSize);
        return queryMap;
    };
    /**
     * @return {?}
     */
    QueryOptions.prototype.toQueryString = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ queryString = '';
        this.toQueryMap().forEach(function (value, key) {
            queryString = queryString.concat(key + "=" + value + "&");
        });
        return queryString.substring(0, queryString.length - 1);
    };
    return QueryOptions;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ResourceService, Resource, NebbRestServiceModule, QueryOptions };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmViYi1yZXN0LXNlcnZpY2UuanMubWFwIiwic291cmNlcyI6WyJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9yZXNvdXJjZS5zZXJ2aWNlLnRzIiwibmc6Ly9uZWJiLXJlc3Qtc2VydmljZS9saWIvcmVzb3VyY2UubW9kZWwudHMiLCJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9uZWJiLXJlc3Qtc2VydmljZS5tb2R1bGUudHMiLCJuZzovL25lYmItcmVzdC1zZXJ2aWNlL2xpYi9xdWVyeS1vcHRpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNlcmlhbGl6ZXIgfSBmcm9tICcuL3NlcmlhbGl6ZXInO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFF1ZXJ5T3B0aW9ucyB9IGZyb20gJy4vcXVlcnktb3B0aW9ucyc7XHJcbmltcG9ydCB7IFJlc291cmNlIH0gZnJvbSAnLi9yZXNvdXJjZS5tb2RlbCc7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VTZXJ2aWNlPFQgZXh0ZW5kcyBSZXNvdXJjZT4ge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxyXG4gICAgcHJpdmF0ZSB1cmw6IHN0cmluZyxcclxuICAgIHByaXZhdGUgZW5kcG9pbnQ6IHN0cmluZyxcclxuICAgIHByaXZhdGUgc2VyaWFsaXplcjogU2VyaWFsaXplclxyXG4gICkge31cclxuXHJcbiAgcHVibGljIGNyZWF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wb3N0PFQ+KGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9YCwgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKSlcclxuICAgICAgLnBpcGUoY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdjcmVhdGUnLCBpdGVtKSkpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHVwZGF0ZShpdGVtOiBUKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5wdXQ8VD4oXHJcbiAgICAgICAgYCR7dGhpcy51cmx9LyR7dGhpcy5lbmRwb2ludH0vJHtpdGVtLmlkfWAsXHJcbiAgICAgICAgdGhpcy5zZXJpYWxpemVyLnRvSnNvbihpdGVtKVxyXG4gICAgICApXHJcbiAgICAgIC5waXBlKGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcigndXBkYXRlJywgaXRlbSkpKTtcclxuICB9XHJcblxyXG4gIGdldChpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50LmdldDxUPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fS8ke2lkfWApO1xyXG4gIH1cclxuXHJcbiAgbGlzdChxdWVyeU9wdGlvbnM6IFF1ZXJ5T3B0aW9ucyk6IE9ic2VydmFibGU8VFtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwQ2xpZW50XHJcbiAgICAgIC5nZXQ8VFtdPihgJHt0aGlzLnVybH0vJHt0aGlzLmVuZHBvaW50fT8ke3F1ZXJ5T3B0aW9ucy50b1F1ZXJ5U3RyaW5nKCl9YClcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKVxyXG4gICAgICApO1xyXG4gIH1cclxuXHJcbiAgZGVsZXRlKGlkOiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZGVsZXRlKGAke3RoaXMudXJsfS8ke3RoaXMuZW5kcG9pbnR9LyR7aWR9YCkucGlwZShcclxuICAgICAgdGFwKHQgPT4gdGhpcy5sb2coYGZldGNoZWQgZGF0YWApKSxcclxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKCdkZWxldGUnKSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGhhbmRsZUVycm9yKG9wZXJhdGlvbiA9ICdvcGVyYXRpb24nLCByZXN1bHQ/OiBUKSB7XHJcbiAgICByZXR1cm4gKGVycm9yOiBhbnkpOiBPYnNlcnZhYmxlPFQ+ID0+IHtcclxuICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgIHRoaXMubG9nKGAke29wZXJhdGlvbn0gZmFpbGVkOiAke2Vycm9yLm1lc3NhZ2V9YCk7XHJcbiAgICAgIHJldHVybiBvZihyZXN1bHQgYXMgVCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBsb2cobWVzc2FnZTogc3RyaW5nKSB7XHJcbiAgICBjb25zb2xlLmxvZygnUmVzb3VyY2Uuc2VydmljZTogJyArIG1lc3NhZ2UpO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgUmVzb3VyY2Uge1xyXG4gIGlkOiBudW1iZXI7XHJcbiAgcGFyZW50SWQ/OiBudW1iZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHZhbHVlczogT2JqZWN0ID0ge30pIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgdmFsdWVzKTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIGV4cG9ydHM6IFtdXG59KVxuZXhwb3J0IGNsYXNzIE5lYmJSZXN0U2VydmljZU1vZHVsZSB7IH1cbiIsImltcG9ydCB7IFF1ZXJ5QnVpbGRlciB9IGZyb20gJy4vcXVlcnktYnVpbGRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgUXVlcnlPcHRpb25zIGltcGxlbWVudHMgUXVlcnlCdWlsZGVyIHtcclxuICBwdWJsaWMgcGFnZU51bWJlcjogbnVtYmVyO1xyXG4gIHB1YmxpYyBwYWdlU2l6ZTogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucGFnZU51bWJlciA9IDE7XHJcbiAgICB0aGlzLnBhZ2VTaXplID0gMTAwMDA7XHJcbiAgfVxyXG5cclxuICB0b1F1ZXJ5TWFwKCkge1xyXG4gICAgY29uc3QgcXVlcnlNYXAgPSBuZXcgTWFwPHN0cmluZywgc3RyaW5nPigpO1xyXG4gICAgcXVlcnlNYXAuc2V0KCdwYWdlTnVtYmVyJywgYCR7dGhpcy5wYWdlTnVtYmVyfWApO1xyXG4gICAgcXVlcnlNYXAuc2V0KCdwYWdlU2l6ZScsIGAke3RoaXMucGFnZVNpemV9YCk7XHJcblxyXG4gICAgcmV0dXJuIHF1ZXJ5TWFwO1xyXG4gIH1cclxuXHJcbiAgdG9RdWVyeVN0cmluZygpIHtcclxuICAgIGxldCBxdWVyeVN0cmluZyA9ICcnO1xyXG4gICAgdGhpcy50b1F1ZXJ5TWFwKCkuZm9yRWFjaCgodmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcpID0+IHtcclxuICAgICAgcXVlcnlTdHJpbmcgPSBxdWVyeVN0cmluZy5jb25jYXQoYCR7a2V5fT0ke3ZhbHVlfSZgKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBxdWVyeVN0cmluZy5zdWJzdHJpbmcoMCwgcXVlcnlTdHJpbmcubGVuZ3RoIC0gMSk7XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUNBOzs7O0FBTUE7Ozs7O0FBQUE7SUFDRSx5QkFDVSxZQUNBLEtBQ0EsVUFDQTtRQUhBLGVBQVUsR0FBVixVQUFVO1FBQ1YsUUFBRyxHQUFILEdBQUc7UUFDSCxhQUFRLEdBQVIsUUFBUTtRQUNSLGVBQVUsR0FBVixVQUFVO0tBQ2hCOzs7OztJQUVHLGdDQUFNOzs7O2NBQUMsSUFBTztRQUNuQixPQUFPLElBQUksQ0FBQyxVQUFVO2FBQ25CLElBQUksQ0FBTyxJQUFJLENBQUMsR0FBRyxTQUFJ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